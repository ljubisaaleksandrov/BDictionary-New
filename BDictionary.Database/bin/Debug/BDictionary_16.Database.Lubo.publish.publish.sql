/*
Deployment script for BDictionary

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "BDictionary"
:setvar DefaultFilePrefix "BDictionary"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Rename refactoring operation with key f56c6642-82a9-4f74-ab34-4dc6e190de68 is skipped, element [dbo].[Word].[Descriptio] (SqlSimpleColumn) will not be renamed to Description';


GO
PRINT N'Creating [dbo].[Synonym]...';


GO
CREATE TABLE [dbo].[Synonym] (
    [Id]              INT IDENTITY (1, 1) NOT NULL,
    [FirstSynonymID]  INT NOT NULL,
    [SecondSynonymID] INT NOT NULL,
    CONSTRAINT [PK_dbo.Synonym] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Word]...';


GO
CREATE TABLE [dbo].[Word] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [Value]       NVARCHAR (30)  NOT NULL,
    [Description] NVARCHAR (MAX) NOT NULL,
    [TypeID]      INT            NULL,
    CONSTRAINT [PK_dbo.Word] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[WordType]...';


GO
CREATE TABLE [dbo].[WordType] (
    [Id]    INT           IDENTITY (1, 1) NOT NULL,
    [Value] NVARCHAR (30) NOT NULL,
    CONSTRAINT [PK_dbo.WordType] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[FK_Word_FirstSynonym]...';


GO
ALTER TABLE [dbo].[Synonym] WITH NOCHECK
    ADD CONSTRAINT [FK_Word_FirstSynonym] FOREIGN KEY ([FirstSynonymID]) REFERENCES [dbo].[Word] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Word_SecondSynonym]...';


GO
ALTER TABLE [dbo].[Synonym] WITH NOCHECK
    ADD CONSTRAINT [FK_Word_SecondSynonym] FOREIGN KEY ([SecondSynonymID]) REFERENCES [dbo].[Word] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Word_WordType]...';


GO
ALTER TABLE [dbo].[Word] WITH NOCHECK
    ADD CONSTRAINT [FK_Word_WordType] FOREIGN KEY ([TypeID]) REFERENCES [dbo].[WordType] ([Id]);


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f56c6642-82a9-4f74-ab34-4dc6e190de68')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f56c6642-82a9-4f74-ab34-4dc6e190de68')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

----------------------------- AspNetRoles -----------------------------
GO

MERGE INTO AspNetRoles AS Target 
USING (VALUES 
(N'69c29dc2-d5f8-41f5-aca8-5147216569ee', N'Admin'),
(N'057e1709-59f1-4ada-9464-362a72ad9999', N'User')) 
AS Source ([Id], [Name]) 
ON Target.Id = Source.Id
-- update matched rows 
WHEN MATCHED THEN 
UPDATE SET Id = Source.Id, Name = Source.Name
-- insert new rows 
WHEN NOT MATCHED BY TARGET THEN 
INSERT (Id, Name) 
VALUES (Id, Name);
-- delete rows that are in the target but not the source
-- WHEN NOT MATCHED BY SOURCE THEN
-- DELETE
GO




----------------------------- AspNetUsers -----------------------------

MERGE INTO AspNetUsers AS Target 
USING (VALUES (N'c98bbf5f-5657-4fb8-b205-772500ab9863'
			,N'admin@bos.com'
			,1
			,N'ACTYzBTj1pryj9Dx+4bRmZGo1MaeLxRcueQEBC/uU4ER9Vx7MSKpJF936pRjn5wK9A=='	--	B0$!legrad
			,N'078753f5-b3d3-43b4-81f8-5889387e2764'
			,NULL
			,0
			,0
			,NULL
			,1
			,0
			,N'admin@bos.com'))
AS Source (	 [Id]
			,[Email]
			,[EmailConfirmed]
			,[PasswordHash]
			,[SecurityStamp]
			,[PhoneNumber]
			,[PhoneNumberConfirmed]
			,[TwoFactorEnabled]
			,[LockoutEndDateUtc]
			,[LockoutEnabled]
			,[AccessFailedCount]
			,[UserName]) 
ON Target.Id = Source.Id
-- update matched rows 
WHEN MATCHED THEN 
UPDATE SET	Id = Source.Id, 
			Email = Source.Email, 
			EmailConfirmed = Source.EmailConfirmed,
			PasswordHash = Source.PasswordHash,
			SecurityStamp = Source.SecurityStamp,
			PhoneNumber = Source.PhoneNumber,
			PhoneNumberConfirmed = Source.PhoneNumberConfirmed,
			TwoFactorEnabled = Source.TwoFactorEnabled,
			LockoutEndDateUtc = Source.LockoutEndDateUtc,
			LockoutEnabled = Source.LockoutEnabled,
			AccessFailedCount = Source.AccessFailedCount,
			UserName = Source.UserName
-- insert new rows 
WHEN NOT MATCHED BY TARGET THEN 
INSERT ( Id
		,Email
		,EmailConfirmed
		,PasswordHash
		,SecurityStamp
		,PhoneNumber
		,PhoneNumberConfirmed
		,TwoFactorEnabled
		,LockoutEndDateUtc
		,LockoutEnabled
		,AccessFailedCount
		,UserName) 
VALUES (Id
		,Email
		,EmailConfirmed
		,PasswordHash
		,SecurityStamp
		,PhoneNumber
		,PhoneNumberConfirmed
		,TwoFactorEnabled
		,LockoutEndDateUtc
		,LockoutEnabled
		,AccessFailedCount
		,UserName);
-- delete rows that are in the target but not the source
-- WHEN NOT MATCHED BY SOURCE THEN
-- DELETE
GO





----------------------------- AspNetUserRoles -----------------------------

MERGE INTO AspNetUserRoles AS Target 
USING (VALUES (N'c98bbf5f-5657-4fb8-b205-772500ab9863', N'69c29dc2-d5f8-41f5-aca8-5147216569ee')) 
AS Source ([UserId], [RoleId]) 
ON Target.UserId = Source.UserId
-- update matched rows 
WHEN MATCHED THEN 
UPDATE SET UserId = Source.UserId, RoleId = Source.RoleId
-- insert new rows 
WHEN NOT MATCHED BY TARGET THEN 
INSERT (UserId, RoleId) 
VALUES (UserId, RoleId);
-- delete rows that are in the target but not the source
-- WHEN NOT MATCHED BY SOURCE THEN
-- DELETE
GO

GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Synonym] WITH CHECK CHECK CONSTRAINT [FK_Word_FirstSynonym];

ALTER TABLE [dbo].[Synonym] WITH CHECK CHECK CONSTRAINT [FK_Word_SecondSynonym];

ALTER TABLE [dbo].[Word] WITH CHECK CHECK CONSTRAINT [FK_Word_WordType];


GO
PRINT N'Update complete.';


GO
